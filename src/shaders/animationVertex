#version 400 core

const int MAX_JOINTS = 50;//Maks antall joints i en modell
const int MAX_WEIGHTS = 3;//Maks antall joints som bestemmer vertexen


in vec3 position;
in vec2 textureCoords;
in vec3 normal;
in ivec3 jointIndicies;
in vec3 weights;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;

uniform mat4 jointTransforms[MAX_JOINTS];
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];

void main(void){
	vec4 totalLocalPosition = vec4(0.0);
	vec4 totalNormal = vec4(0.0);
	
	for(int i=0;i<MAX_WEIGHTS;i++){
		mat4 jointTransform = jointTransforms[jointIndicies[i]];
		vec4 posePosition = jointTransform * vec4(position,1.0);
		totalLocalPosition += posePosition * weights[i];

		vec4 worldNormal = jointTransform * vec4(normal,0.0);
		totalNormal += worldNormal * weights[i];
	}




	
	vec4 worldPosition = transformationMatrix * totalLocalPosition;
	gl_Position = projectionMatrix * viewMatrix * worldPosition;// * vec4(totalLocalPosition.xyz,1.0);
	pass_textureCoords = textureCoords;
	
	vec3 newNormal = vec3(transformationMatrix * totalNormal);
	surfaceNormal = newNormal; // * totalLocalPosition.xyz;
	
	
	/*
		Lighting, multiple sources
	*/
	for(int i=0; i<4; i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	
	
	
	
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
}

